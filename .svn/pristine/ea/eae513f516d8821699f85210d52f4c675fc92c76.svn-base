package com.phhc.myAccount;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.phhc.R;
import com.phhc.utils.CreateSQLiteDatabase;
import com.phhc.utils.PersonalInformation;

import java.util.ArrayList;

public class CompletePersonalInformationFragment extends Fragment {

    ArrayList<PersonalInformation> list;
    PersonalInformation personalInformation;
    String sysUserID = null;
    ImageButton back;
    FamilyMemberManageFragment familyMemberManageFragment;
    MyAccountFragment myAccountFragment;
    CreateSQLiteDatabase databaseHelper;
    SQLiteDatabase db;
    String databaseName, portrait_database = "", honeyName_database = "", sex_database = "", cellphoneNum_database = "", birthday_database = "";
    TextView text_under_portrait, honey_name_text_view, sex_text_view, cellphone_text_view, birthday_text_view, save, title;
    ImageView portraitImage;
    RelativeLayout portrait, honey_name, sex, cellphone, birthday, relax_time;
    int year_database, month_database, day_database;
    int isMySelf;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        // TODO Auto-generated method stub
        databaseName = "LocalDrugMessage";
        databaseHelper = new CreateSQLiteDatabase(getActivity(), databaseName, null, 1);
        db = databaseHelper.getWritableDatabase();
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        Bundle bundle = this.getArguments();
        //isMySelf字段相当于数据库中isFamily
        isMySelf = bundle.getInt("isMyself");
        View rootView = inflater.inflate(R.layout.complete_personal_information, container, false);
        //初始化个人信息的实体
        personalInformation = new PersonalInformation();
        String sql2 = "select * from MemberInfoTable where isFamily = '" + isMySelf + "'";
        Cursor cursor2 = db.rawQuery(sql2, null);
        while (cursor2.moveToNext()) {
            personalInformation.setPortrait(cursor2.getString(3));
            personalInformation.setHoneyName(cursor2.getString(1));
            personalInformation.setSex(cursor2.getString(5));
            personalInformation.setCellphone(cursor2.getString(4));
            personalInformation.setBirthday(cursor2.getString(6));
            personalInformation.setGetupTime(cursor2.getString(7));
            personalInformation.setBreakfastTime(cursor2.getString(8));
            personalInformation.setLunchTime(cursor2.getString(9));
            personalInformation.setDinnerTime(cursor2.getString(10));
            personalInformation.setSleepTime(cursor2.getString(11));
        }
        list = new ArrayList<>();
        list.add(personalInformation);
        //标题
        title = (TextView) rootView.findViewById(R.id.title);
        //返回
        back = (ImageButton) rootView.findViewById(R.id.back);
        back.setOnClickListener(new MyClickBackListener());
        //头像
        portrait = (RelativeLayout) rootView.findViewById(R.id.portrait);
        portrait.setOnClickListener(new MyClickPortraitListener());
        portraitImage = (ImageView) rootView.findViewById(R.id.portrait_image);
        //昵称
        honey_name = (RelativeLayout) rootView.findViewById(R.id.honey_name);
        honey_name.setOnClickListener(new MyClickHoneyNameListener());
        honey_name_text_view = (TextView) rootView.findViewById(R.id.honey_name_edit_text);
        text_under_portrait = (TextView) rootView.findViewById(R.id.text_under_portrait);
        //性别
        sex = (RelativeLayout) rootView.findViewById(R.id.sex);
        sex.setOnClickListener(new MyClickSexListener());
        sex_text_view = (TextView) rootView.findViewById(R.id.sex_text_view);
        //手机号
        cellphone = (RelativeLayout) rootView.findViewById(R.id.cellphone);
        cellphone.setOnClickListener(new MyClickCellphoneNumListener());
        cellphone_text_view = (TextView) rootView.findViewById(R.id.cellphone_text_view);
        //生日
        birthday = (RelativeLayout) rootView.findViewById(R.id.birthday);
        birthday.setOnClickListener(new MyClickBirthdayListener());
        birthday_text_view = (TextView) rootView.findViewById(R.id.birthday_text_view);
        //作息时间
        relax_time = (RelativeLayout) rootView.findViewById(R.id.relax_time);
        relax_time.setOnClickListener(new MyClickRelaxTimeListener());
        //保存
        save = (TextView) rootView.findViewById(R.id.save);
        save.setOnClickListener(new MyClickSaveListener());
        //表示完善个人信息
        if (isMySelf == 1) {
            //查数据库去初始化有关视图
            String sql1 = "select * from anonymityRegister";
            Cursor cursor1 = db.rawQuery(sql1, null);
            while (cursor1.moveToNext()) {
                sysUserID = cursor1.getString(3);
            }
            String sql = "select * from MemberInfoTable where isFamily = '" + "1" + "'";
            Cursor cursor = db.rawQuery(sql, null);
            while (cursor.moveToNext()) {
                honeyName_database = cursor.getString(1);
                portrait_database = cursor.getString(3);
                cellphoneNum_database = cursor.getString(4);
                sex_database = cursor.getString(5);
                birthday_database = cursor.getString(6);
            }
            if (!birthday_database.equals("")) {
                String birthday_split[] = birthday_database.split("-");
                year_database = Integer.parseInt(birthday_split[0]);
                month_database = Integer.parseInt(birthday_split[1]);
                day_database = Integer.parseInt(birthday_split[2]);
            }
            db.close();
            switch (portrait_database) {
                case "tx1":
                    portraitImage.setImageResource(R.drawable.tx1);
                    break;
                case "tx2":
                    portraitImage.setImageResource(R.drawable.tx2);
                    break;
                case "tx3":
                    portraitImage.setImageResource(R.drawable.tx3);
                    break;
                case "tx4":
                    portraitImage.setImageResource(R.drawable.tx4);
                    break;
                case "tx5":
                    portraitImage.setImageResource(R.drawable.tx5);
                    break;
                case "tx6":
                    portraitImage.setImageResource(R.drawable.tx6);
                    break;
                case "tx7":
                    portraitImage.setImageResource(R.drawable.tx7);
                    break;
                case "tx8":
                    portraitImage.setImageResource(R.drawable.tx8);
                    break;
            }
            honey_name_text_view.setText(honeyName_database);
            text_under_portrait.setText(honeyName_database);
            sex_text_view.setText(sex_database);
            cellphone_text_view.setText(cellphoneNum_database);
            birthday_text_view.setText(birthday_database);
            //表示添加成员信息，初始的时候不显示其他数据
        } else {
            honey_name_text_view.setText("请输入");
            text_under_portrait.setText(null);
            cellphone_text_view.setText("请输入");
            birthday_text_view.setText("请输入");
            title.setText("添加成员信息");
        }

        return rootView;
    }

    @Override
    public void onPause() {
        // TODO Auto-generated method stub
        super.onPause();
    }

    @Override
    public void onResume() {
        // TODO Auto-generated method stub
        super.onResume();
    }

    @Override
    public void onStop() {
        // TODO Auto-generated method stub
        super.onStop();
    }

    //点击头像监视器 尼见 2015-03-03
    class MyClickPortraitListener implements View.OnClickListener {

        @Override
        public void onClick(View v) {

            SelectPortraitDialogFragment selectPortraitDialogFragment = SelectPortraitDialogFragment.newInstance(1);
            selectPortraitDialogFragment.setConfirmInterface(new SelectPortraitDialogFragment.ConfirmInterface() {

                @Override
                public void onConfirmInterface(String portrait) {
                    if (portrait == null) {
                        portrait = "4";
                    }
                    switch (portrait) {
                        case "1":
                            portraitImage.setImageResource(R.drawable.tx1);
                            portrait_database = "tx1";
                            break;
                        case "2":
                            portraitImage.setImageResource(R.drawable.tx2);
                            portrait_database = "tx2";
                            break;
                        case "3":
                            portraitImage.setImageResource(R.drawable.tx3);
                            portrait_database = "tx3";
                            break;
                        case "4":
                            portraitImage.setImageResource(R.drawable.tx4);
                            portrait_database = "tx4";
                            break;
                        case "5":
                            portraitImage.setImageResource(R.drawable.tx5);
                            portrait_database = "tx5";
                            break;
                        case "6":
                            portraitImage.setImageResource(R.drawable.tx6);
                            portrait_database = "tx6";
                            break;
                        case "7":
                            portraitImage.setImageResource(R.drawable.tx7);
                            portrait_database = "tx7";
                            break;
                        case "8":
                            portraitImage.setImageResource(R.drawable.tx8);
                            portrait_database = "tx8";
                            break;
                        default:
                            portraitImage.setImageResource(R.drawable.tx1);
                            portrait_database = "tx1";
                            break;
                    }
                }
            });
            selectPortraitDialogFragment.show(getActivity().getFragmentManager(), "selectPortraitDialogFragment");

        }

    }

    //点击昵称监视器 尼见 2015-03-03
    class MyClickHoneyNameListener implements View.OnClickListener {

        @Override
        public void onClick(View v) {
            ChangeHoneyNameDialogFragment changeHoneyNameDialogFragment = ChangeHoneyNameDialogFragment.newInstance(1);
            changeHoneyNameDialogFragment.setConfirmInterface(new ChangeHoneyNameDialogFragment.ConfirmInterface() {

                @Override
                public void onConfirmInterface(String honeyName) {
                    honeyName_database = honeyName;
                    text_under_portrait.setText(honeyName);
                    honey_name_text_view.setText(honeyName);
                }
            });
            changeHoneyNameDialogFragment.show(getActivity().getFragmentManager(), "selectPortraitDialogFragment");

        }
    }

    //点击返回监视器 尼见 2015-03-03
    class MyClickBackListener implements View.OnClickListener {

        @Override
        public void onClick(View v) {
        	
        	//在这里去判断是否修改了个人信息没有保存直接返回 尼见 2015-04-17
        	
        	
            int isLogin = 0;
            if (isMySelf == 1) {
                try {
                    db = databaseHelper.getWritableDatabase();
                    String sql = "select * from anonymityRegister";
                    Cursor cursor = db.rawQuery(sql, null);
                    while (cursor.moveToNext()) {
                        isLogin = cursor.getInt(7);
                    }
                    //如果标志flag为0则让其匿名注册，如果flag为1则拒绝匿名注册。
                    if (isLogin == 1) {
                        FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                        FragmentTransaction fragmentTransaction = fragmentManager
                                .beginTransaction();
                        myAccountFragment = new MyAccountFragment();
                        Bundle bundle = new Bundle();
                        bundle.putInt("flag", 1);
                        myAccountFragment.setArguments(bundle);
                        fragmentTransaction.setCustomAnimations(R.anim.enter_from_left, R.anim.exit_to_right);
                        fragmentTransaction.replace(R.id.login_fragment, myAccountFragment, "myAccountFragment");
                        fragmentTransaction.addToBackStack(null);
                        fragmentTransaction.commit();
                    } else {
                        FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                        FragmentTransaction fragmentTransaction = fragmentManager
                                .beginTransaction();
                        myAccountFragment = new MyAccountFragment();
                        Bundle bundle = new Bundle();
                        bundle.putInt("flag", 0);
                        myAccountFragment.setArguments(bundle);
                        fragmentTransaction.setCustomAnimations(R.anim.enter_from_left, R.anim.exit_to_right);
                        fragmentTransaction.replace(R.id.login_fragment, myAccountFragment, "myAccountFragment");
                        fragmentTransaction.addToBackStack(null);
                        fragmentTransaction.commit();
                    }
                    db.close();
                } catch (Exception e) {
                    // TODO: handle exception
                }
            } else {
                FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                FragmentTransaction fragmentTransaction = fragmentManager
                        .beginTransaction();
                familyMemberManageFragment = new FamilyMemberManageFragment();
                fragmentTransaction.setCustomAnimations(R.anim.enter_from_left, R.anim.exit_to_right);
                fragmentTransaction.replace(R.id.login_fragment, familyMemberManageFragment, "familyMemberManageFragment");
                fragmentTransaction.addToBackStack(null);
                fragmentTransaction.commit();
            }
        }
    }

    //点击性别监视器 尼见 2015-03-04
    class MyClickSexListener implements View.OnClickListener {

        @Override
        public void onClick(View v) {
            ChangeSexDialogFragment changeSexDialogFragment = ChangeSexDialogFragment.newInstance("男");
            changeSexDialogFragment.setConfirmInterface(new ChangeSexDialogFragment.ConfirmInterface() {

                //接口回调实现通信
                @Override
                public void onConfirmInterface(String sex) {
                    switch (sex) {
                        case "man":
                            sex_text_view.setText("男");
                            sex_database = "男";
                            break;
                        case "woman":
                            sex_text_view.setText("女");
                            sex_database = "女";
                            break;
                    }
                }
            });
            Bundle bundle = new Bundle();
            bundle.putString("sex", sex_database);
            changeSexDialogFragment.setArguments(bundle);
            changeSexDialogFragment.show(getActivity().getFragmentManager(), "changeSexDialogFragment");

        }
    }

    //点击手机号监视器 尼见 2015-03-04
    class MyClickCellphoneNumListener implements View.OnClickListener {

        @Override
        public void onClick(View v) {
            InputCellphoneNumDialogFragment inputCellphoneNumDialogFragment = InputCellphoneNumDialogFragment.newInstance(1);
            inputCellphoneNumDialogFragment.setConfirmInterface(new InputCellphoneNumDialogFragment.ConfirmInterface() {

                //接口回调实现通信
                @Override
                public void onConfirmInterface(String cellphoneNum) {
                    cellphoneNum_database = cellphoneNum;
                    cellphone_text_view.setText(cellphoneNum);
                }
            });
            inputCellphoneNumDialogFragment.show(getActivity().getFragmentManager(), "changeSexDialogFragment");

        }
    }

    //点击生日监视器 尼见 2015-03-04
    class MyClickBirthdayListener implements View.OnClickListener {

        @Override
        public void onClick(View v) {
            InputBirthdayDialogFragment inputBirthdayDialogFragment = InputBirthdayDialogFragment.newInstance(year_database, month_database, day_database);
            inputBirthdayDialogFragment.setConfirmInterface(new InputBirthdayDialogFragment.ConfirmInterface() {

                //接口回调实现通信
                @Override
                public void onConfirmInterface(int year, int month, int day) {
                    String month_show;
                    String day_show;
                    if (month <= 9) {
                        month_show = "0" + month;
                    } else {
                        month_show = Integer.toString(month);
                    }
                    if (day <= 9) {
                        day_show = "0" + day;
                    } else {
                        day_show = Integer.toString(day);
                    }
                    birthday_text_view.setText(year + "-" + month_show + "-" + day_show);
                    birthday_database = year + "-" + month_show + "-" + day_show;
                }
            });
            if (birthday_database.equals("")) {
                Bundle bundle = new Bundle();
                bundle.putInt("year", 1991);
                bundle.putInt("month", 01);
                bundle.putInt("day", 01);
                inputBirthdayDialogFragment.setArguments(bundle);
                inputBirthdayDialogFragment.show(getActivity().getFragmentManager(), "inputBirthdayDialogFragment");
            } else {
                String date[] = birthday_database.split("-");
                int year = Integer.parseInt(date[0]);
                int month = Integer.parseInt(date[1]);
                int day = Integer.parseInt(date[2]);
                Bundle bundle = new Bundle();
                bundle.putInt("year", year);
                bundle.putInt("month", month);
                bundle.putInt("day", day);
                inputBirthdayDialogFragment.setArguments(bundle);
                inputBirthdayDialogFragment.show(getActivity().getFragmentManager(), "inputBirthdayDialogFragment");
            }
        }
    }

    //点击作息时间监视器 尼见 2015-03-04
    class MyClickRelaxTimeListener implements View.OnClickListener {

        @Override
        public void onClick(View v) {
            FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
            FragmentTransaction fragmentTransaction = fragmentManager
                    .beginTransaction();
            RelaxTimeFragment relaxTimeFragment = new RelaxTimeFragment();
            Bundle bundle = new Bundle();
            bundle.putString("itemName", honeyName_database);
            bundle.putInt("isMyself", 1);
            bundle.putCharSequenceArrayList("PersonalInformation", (ArrayList) list);
            relaxTimeFragment.setArguments(bundle);
            fragmentTransaction.setCustomAnimations(R.anim.enter_from_right, R.anim.exit_to_left);
            fragmentTransaction.replace(R.id.login_fragment, relaxTimeFragment, "relaxTimeFragment");
            fragmentTransaction.addToBackStack(null);
            fragmentTransaction.commit();
        }
    }

    //点击保存个人信息监视器 尼见 2015-03-04
    class MyClickSaveListener implements View.OnClickListener {

        @Override
        public void onClick(View v) {

            //昵称为空
            if (honeyName_database.length() == 0) {

                getActivity().runOnUiThread(new Runnable() {
                    public void run() {
                        AlertDialog dialog = getAlertDialogWithHoneyNameIsNULL();
                        dialog.show();
                    }
                });

                return;
            }
            //如果isMyself标志位是1，表示为更新个人信息，调用update语句更新数据库
            if (isMySelf == 1) {
                db = databaseHelper.getWritableDatabase();
                String sql = "update MemberInfoTable set photo ='" + portrait_database + "' , name ='" + honeyName_database + "' , sex ='" + sex_database + "' , tel ='" + cellphoneNum_database + "' , birth ='" + birthday_database + "' where memberID ='" + sysUserID + "'";
                db.execSQL(sql);
                db.close();
                getActivity().runOnUiThread(new Runnable() {
                    public void run() {
                        AlertDialog dialog = getAlertDialogWithSaveSuccess();
                        dialog.show();
                    }
                });
                //如果isMyself标志位不是1，表示为添加成员信息，调用add语句对数据库进行添加。
            } else {
                db = databaseHelper.getWritableDatabase();
                String familyMemberUserID = java.util.UUID.randomUUID().toString();
                String sql = "insert into MemberInfoTable (memberID, name, isFamily, photo, tel, sex, birth, getup, breakfast, lunch, dinner, sleep, updateTime, updateState) values ('" + familyMemberUserID + "','" + honeyName_database + "','" + "0" + "','" + portrait_database + "','" + cellphoneNum_database + "','" + sex_database + "','" + birthday_database + "','" + "07:00" + "','" + "07:30" + "','" + "12:00" + "','" + "19:00" + "','" + "21:00" + "','" + "" + "','" + "1" + "')";
                db.execSQL(sql);
                db.close();
                getActivity().runOnUiThread(new Runnable() {
                    public void run() {
                        AlertDialog dialog = getAlertDialogWithAddSuccess();
                        dialog.show();
                    }
                });
            }
        }
    }

    //保存成功提示框 尼见 2015-03-04
    AlertDialog getAlertDialogWithSaveSuccess() {

        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(),
                android.app.AlertDialog.THEME_DEVICE_DEFAULT_LIGHT);

        builder.setTitle("提示");
        builder.setMessage("用户修改信息成功!");
        builder.setPositiveButton("确定", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                FragmentTransaction fragmentTransaction = fragmentManager
                        .beginTransaction();
                myAccountFragment = new MyAccountFragment();
                Bundle bundle = new Bundle();
                bundle.putInt("flag", 0);
                myAccountFragment.setArguments(bundle);
                fragmentTransaction.setCustomAnimations(R.anim.enter_from_left, R.anim.exit_to_right);
                fragmentTransaction.replace(R.id.login_fragment, myAccountFragment, "myAccountFragment");
                fragmentTransaction.commit();
            }
        });
        builder.setCancelable(false);
        android.app.AlertDialog dialog = builder.create();
        return dialog;
    }

    //添加成员信息成功 尼见 2015-03-04
    AlertDialog getAlertDialogWithAddSuccess() {

        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(),
                android.app.AlertDialog.THEME_DEVICE_DEFAULT_LIGHT);

        builder.setTitle("提示");
        builder.setMessage("添加成员成功!");
        builder.setPositiveButton("确定", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                FragmentTransaction fragmentTransaction = fragmentManager
                        .beginTransaction();
                familyMemberManageFragment = new FamilyMemberManageFragment();
                fragmentTransaction.setCustomAnimations(R.anim.enter_from_left, R.anim.exit_to_right);
                fragmentTransaction.replace(R.id.login_fragment, familyMemberManageFragment, "familyMemberManageFragment");
                fragmentTransaction.commit();
            }
        });
        builder.setCancelable(false);
        android.app.AlertDialog dialog = builder.create();
        return dialog;
    }

    //昵称为空提示框提示框 尼见 2015-03-05
    AlertDialog getAlertDialogWithHoneyNameIsNULL() {

        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(),
                android.app.AlertDialog.THEME_DEVICE_DEFAULT_LIGHT);

        builder.setTitle("提示");
        builder.setMessage("昵称不能为空!");
        builder.setPositiveButton("确定", null);
        builder.setCancelable(false);
        android.app.AlertDialog dialog = builder.create();
        return dialog;
    }

}


